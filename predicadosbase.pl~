% Gabriel Ojeda
% 20.117.689-1
% Laboratorio 2 Prolog

%--------------- PREDICOS BASE PARA OTROS PREDICADOS ---------------.

%%--------------- SELECTORES ---------------.
%Generales pixels
getX([X|_],X).
getY([_|[Y|_]],Y).

%%--------------- AGREGAR ELEMENTO EN LISTA ---------------.
appendElement( Elemento, [], [Elemento]).
appendElement( Elemento, Lista, [Elemento|Lista]).


%-------- PREDICADO QUE DA VUELTA UNA IMAGEN HORIZONTALMENTE --------.


imageFlipH(Img, NewImg) :-
    getListaPixels(Img, ListaPixeles),
    getWidth(Img, Ancho),
    getHeigth(Img, Alto),
    ((imagenIsBimap(Img), pixelsFlipHBit(ListaPixeles, Ancho, NewListPixels), image(Ancho, Alto, NewListPixels, NewImg));
    (imagenIsHexmap(Img), pixelsFlipHHex(ListaPixeles, Ancho, NewListPixels), image(Ancho, Alto, NewListPixels, NewImg));
    (imageIsPixmap(Img), pixelsFlipHRgb(ListaPixeles, Ancho, NewListPixels), image(Ancho, Alto, NewListPixels, NewImg))).



%-------- PREDICADO QUE DA VUELTA UNA IMAGEN VERTICALMENTE --------.


imageFlipV(Img, NewImg) :-
    getListaPixels(Img, ListaPixeles),
    getWidth(Img, Ancho),
    getHeigth(Img, Alto),
    ((imagenIsBimap(Img), pixelsFlipVBit(ListaPixeles, Alto, NewListPixels), image(Ancho, Alto, NewListPixels, NewImg));
    (imagenIsHexmap(Img), pixelsFlipVHex(ListaPixeles, Alto, NewListPixels), image(Ancho, Alto, NewListPixels, NewImg));
    (imageIsPixmap(Img), pixelsFlipHVRgb(ListaPixeles, Alto, NewListPixels), image(Ancho, Alto, NewListPixels, NewImg))).

%-------- PREDICADO QUE RECORTA UNA IMAGEN --------.

%----- PIXBIT -----
cropbit([],_,_,_,_,[]).
cropbit([Cabeza|Cola], X, Y, X1, Y1, PixelesFinales):-
    cropbit(Cola, X, Y, X1, Y1, PixelesOriginales),
    pixbit(Ancho, Alto,_,_ ,Cabeza),
    ( X =< Ancho, Ancho =< X1,
      Y =< Alto, Alto =< Y1 -> append(Cabeza, PixelesOriginales, PixelesFinales);
    append([], PixelesOriginales, PixelesFinales)).

%----- PIXHEX -----
crophex([],_,_,_,_,[]).
crophex([Cabeza|Cola], X, Y, X1, Y1, PixelesFinales):-
    crophex(Cola, X, Y, X1, Y1, PixelesOriginales),
    pixhex(Ancho, Alto,_,_ ,Cabeza),
    ( X =< Ancho, Ancho =< X1,
      Y =< Alto, Alto =< Y1 -> append(Cabeza, PixelesOriginales, PixelesFinales);
    append([], PixelesOriginales, PixelesFinales)).

%----- PIXRGB -----
croprgb([],_,_,_,_,[]).
croprgb([Cabeza|Cola], X, Y, X1, Y1, PixelesFinales):-
    croprgb(Cola, X, Y, X1, Y1, PixelesOriginales),
    pixrgb(Ancho, Alto, _, _, _, _, Cabeza),
    ( X =< Ancho, Ancho =< X1,
      Y =< Alto, Alto =< Y1 -> append(Cabeza, PixelesOriginales, PixelesFinales);
    append([], PixelesOriginales, PixelesFinales)).

imageCrop(Img, X, Y, X1, Y1, NewImg):-
    image(X2, Y2, ListaPixeles, Img),
    ((imagenIsBimap(Img), cropbit(ListaPixeles, X, Y, X1, Y1, NewListPixels));
     (imagenIsHexmap(Img), crophex(ListaPixeles, X, Y, X1, Y1, NewListPixels));
     (imageIsPixmap(Img), croprgb(ListaPixeles, X, Y, X1, Y1, NewListPixels))),
     image(X2, Y2, NewListPixels, NewImg).


%-------- PREDICADO QUE TRANSFORMA UNA IMAGEN RGB A HEXADECIMAL --------.
imageRGBToHex(Img, NewImg):-
    image(X, Y, ListaPixels, Img),
    imageRGBToHex(ListaPixels, NewListaPixels),
    image(X, Y, NewListaPixels, NewImg).

imageRGBToHex([],[]).
imageRGBToHex([Cabeza|Cola], PixelesHex):-
    imageRGBToHex(Cola, PixelesAntes),
    pixrgb(X, Y, R, G, B, D, Cabeza),
    dec_to_hex(R, Rojo),
    dec_to_hex(G, Verde),
    dec_to_hex(B, Azul),
    string_concat(R, G, RG),
    string_concat(RG, B, RGB),
    pixhex(X, Y, RGB, D, Pixeles),
    append([Pixeles], PixelesAntes, PixelesHex).

dec_to_hex(Value,Atom):-
    Value =< 0xFF, !,
    format(atom(Atom_lower),'|`0t~16r~2|',Value),
    upcase_atom(Atom_lower,Atom).

%-------- PREDICADO QUE CREA UN HISTOGRAMA --------.
imageToHistogram(Img, Histograma):-
    getListaPixels(Img, ListaPixeles),
    histogramaBit(ListaPixeles, Histograma).

histogramaBit([],[]). %caso base
histogramaBit(ListaPixeles, HSalida) :-
    countElement(ListaPixeles, 0, N),
    countElement(ListaPixeles, 1, N1),
    append([[0,N]],[[1,N1]], HSalida).

countElement([], _, 0).
countElement([Elemento|RestoIn], Valor, N) :-
    countElement(RestoIn, Valor, Acc),
    getBit(Elemento, Color),
    (Color = Valor,
    N is Acc + 1;
    N is Acc).




%-------- PREDICADO QUE CAMBIA EL PIXEL DE UNA IMAGEN --------.
imageChangePixel(Img, PixelChange, NewImg):-
    image(Ancho, Alto, ListaPixels, Img),
    ((imagenIsBimap(Img), changePixelBit(ListaPixels, PixelChange, NewListPixels));
     (imagenIsHexmap(Img), changePixelHex(ListaPixels, PixelChange, NewListPixels));
     (imageIsPixmap(Img), changePixelRgb(ListaPixels, PixelChange, NewListPixels))),
    image(Ancho, Alto, NewListPixels, NewImg).

changePixelBit([], _, []).
changePixelBit([Pixel|Resto], PixelChange, NewListPixels):-
    changePixelBit(Resto, PixelChange, ListaPixels),
    pixbit(X, Y, _, _, Pixel),
    pixbit(X1, Y1, _, _, PixelChange),
    (X = X1, Y = Y1,
    append([PixelChange], ListaPixels, NewListPixels);
    append([Pixel], ListaPixels, NewListPixels)).

changePixelHex([], _, []).
changePixelHex([Pixel|Resto], PixelChange, NewListPixels):-
    changePixelHex(Resto, PixelChange, ListaPixels),
    pixhex(X, Y, _, _, Pixel),
    pixhex(X1, Y1, _, _, PixelChange),
    (X = X1, Y = Y1,
    append([PixelChange], ListaPixels, NewListPixels);
    append([Pixel], ListaPixels, NewListPixels)).

changePixelRgb([], _, []).
changePixelRgb([Pixel|Resto], PixelChange, NewListPixels):-
    changePixelRgb(Resto, PixelChange, ListaPixels),
    pixrgb(X, Y, _, _, _, _, Pixel),
    pixrgb(X1, Y1, _, _, _, _, PixelChange),
    (X = X1, Y = Y1,
    append([PixelChange], ListaPixels, NewListPixels);
    append([Pixel], ListaPixels, NewListPixels)).


%% Meta Primaria: imageInvertColorRGB
imageInvertColorRGB(Pixel, NewPixel):-
    pixrgb(X, Y, R, G, B, D, Pixel),
    NewR is 255 - R,
    NewG is 255 - G,
    NewB is 255 - B,
    pixrgb(X, Y, NewR, NewG, NewB, D, NewPixel).
